# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2.1
workflows:
  running_ci:
    jobs:
      - build
      - print_env_variable:
          requires:
            - build
      - save_hello_world_output
      - print_output_file:
          requires:
            - save_hello_world_output
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.1-node-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    steps:
      - checkout

      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo docker-php-ext-install zip

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      #- restore_cache:
       #   keys:
        #    - node-v1-{{ checksum "package.json" }}
         #   - node-v1-
      #- run: yarn install
      #- save_cache:
       #   key: node-v1-{{ checksum "package.json" }}
        #  paths:
         #   - node_modules

      # prepare the database
      #- run: touch storage/testing.sqlite
      #- run: php artisan migrate --env=testing --database=sqlite_testing --force

      # run tests with phpunit or codecept
      #- run: ./vendor/bin/phpunit
      #- run: ./vendor/bin/codecept build
      #- run: ./vendor/bin/codecept run

  #example job
  print_env_variable:
    docker:
        - image: circleci/php:7.1-node-browsers
    steps:
        - run:
            name: "echo an env var that is part of our project"
            command: |
              echo $ORGANISATION_NAME

#try doing some data transfer from one job to another by sharing files
  save_hello_world_output:
    docker:
      - image: circleci/php:7.1-node-browsers
    steps:
      - run: echo "hello_world" > output.txt
      - persist_to_workspace:
        root: ~/
        paths:
            - output.txt
  print_hello_world_output:
    docker:
      - image: circleci/php:7.1-node-browsers
    steps:
      - attach_workspace:
          at: ~/
      - run: cat output.txt